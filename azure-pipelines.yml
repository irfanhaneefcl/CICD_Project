# Pipeline YAML file for Java Spring Boot application with deployment to OpenShift

trigger:
- develop

variables:
  # Docker Hub registry credentials
  dockerRegistry: $(DOCKER_REGISTRY)
  dockerRegistryUsername: $(DOCKER_USERNAME)
  dockerRegistryPassword: $(DOCKER_PASSWORD)
  # Artifacts feed name
  artifactsFeeds: eduproj
  # Docker image information
  dockerImageName: Irfan-sample

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    displayName: Build job
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    - task: JavaToolInstaller@0
      inputs:
        versionSpec: '11.x'
        jdkArchitecture: 'x64'
        jdkArchitectureOption: 'x64'

    - task: MavenAuthenticate@0
      inputs:
        artifactsFeeds: $(artifactsFeeds)
    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        options: '-B'
        goals: 'clean package'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml''**/surefire-reports/TEST-*.xml'

- stage: DockerBuild
  displayName: Docker build stage
  jobs:
  - job: DockerBuildJob
    displayName: Docker build job
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'docker-test' # Replace with the name of your Docker Hub service connection
        repository: $(dockerRegistry)$(dockerImageName)
        command: 'build'
        Dockerfile: '**/Dockerfile'
        tags: |
          $(Build.BuildId)
    - task: Docker@2
      inputs:
        containerRegistry: 'docker-test' # Replace with the name of your Docker Hub service connection
        repository: $(dockerRegistry)$(dockerImageName)
        command: 'push'
        Dockerfile: '**/Dockerfile'
        tags: |
          $(Build.BuildId)
        containerUsername: $(dockerRegistryUsername)
        containerPassword: $(dockerRegistryPassword)

- stage: Deploy
  displayName: Deploy stage
  jobs:
  - job: DeployJob
    displayName: Deploy job
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Kubernetes@1
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceConnection: '<KUBERNETES_SERVICE_CONNECTION_NAME>'
        namespace: '<NAMESPACE>'
        command: 'apply'
        useConfigurationFile: true
        configurationType: 'inline'
        inline: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: Irfan-sample
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: Irfan-sample
            template:
              metadata:
                labels:
                  app: Irfan-sample
              spec:
                containers:
                - name: Irfan-sample
                  image: $(dockerRegistry)$(dockerImageName):$(Build.Build
